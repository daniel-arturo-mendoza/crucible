service: crucible-backend

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    OPENAI_API_KEY: ${env:OPENAI_API_KEY, ''}
    DEEPSEEK_API_KEY: ${env:DEEPSEEK_API_KEY, ''}
    DEEPSEEK_API_URL: ${env:DEEPSEEK_API_URL, 'https://api.deepseek.com/v1'}
    TWILIO_ACCOUNT_SID: ${env:TWILIO_ACCOUNT_SID, ''}
    TWILIO_AUTH_TOKEN: ${env:TWILIO_AUTH_TOKEN, ''}
    TWILIO_WHATSAPP_NUMBER: ${env:TWILIO_WHATSAPP_NUMBER, ''}
    USER_LOCKS_TABLE: ${self:service}-${self:provider.stage}-user-locks
    JOB_QUEUE_TABLE: ${self:service}-${self:provider.stage}-job-queue
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-${self:provider.stage}-user-locks"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-${self:provider.stage}-user-locks/*"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-${self:provider.stage}-job-queue"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-${self:provider.stage}-job-queue/*"

package:
  patterns:
    - 'crucible-synthesis-config.json'
    - '../crucible-core/src/**'
    - '!../crucible-core/node_modules/**'
    - '!../crucible-core/examples/**'
    - '!../crucible-core/README.md'
    - '!../crucible-core/package-lock.json'

functions:
  api:
    handler: src/lambda.handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
    timeout: 30
    memorySize: 512

  # Async worker for processing Crucible jobs
  worker:
    handler: src/worker.handler
    timeout: 300
    memorySize: 512
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: true

plugins:
  - serverless-dotenv-plugin
  - serverless-esbuild
  - serverless-offline

custom:
  dotenv:
    path: ../.env
  esbuild:
    bundle: true
    minify: false
    sourcemap: false
    exclude:
      - aws-sdk
      - dotenv
    packager: npm
    target: node18
  serverless-offline:
    httpPort: 3000
    noPrependStageInUrl: true

# DynamoDB Tables
resources:
  Resources:
    # User Locks Table - prevents overlapping requests
    UserLocksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-user-locks
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    # Job Queue Table - stores pending Crucible jobs
    JobQueueTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-job-queue
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: jobId
            AttributeType: S
          - AttributeName: status
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: N
        KeySchema:
          - AttributeName: jobId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: StatusCreatedAtIndex
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true 